// +build !ignore_autogenerated

/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/dynatrace/v1alpha1.OneAgent":       schema_pkg_apis_dynatrace_v1alpha1_OneAgent(ref),
		"./pkg/apis/dynatrace/v1alpha1.OneAgentSpec":   schema_pkg_apis_dynatrace_v1alpha1_OneAgentSpec(ref),
		"./pkg/apis/dynatrace/v1alpha1.OneAgentStatus": schema_pkg_apis_dynatrace_v1alpha1_OneAgentStatus(ref),
	}
}

func schema_pkg_apis_dynatrace_v1alpha1_OneAgent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Dyantrace OneAgent for full-stack monitoring",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/dynatrace/v1alpha1.OneAgentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/dynatrace/v1alpha1.OneAgentStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/dynatrace/v1alpha1.OneAgentSpec", "./pkg/apis/dynatrace/v1alpha1.OneAgentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_dynatrace_v1alpha1_OneAgentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OneAgentSpec defines the desired state of OneAgent",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "Location of the Dynatrace API to connect to, including your specific environment ID",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"skipCertCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable certificate validation checks for installer download and API communication",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Node selector to control the selection of nodes (optional)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Optional: set tolerations for the OneAgent pods",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"waitReadySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defines the time to wait until OneAgent pod is ready after update - default 300 sec",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: the Dynatrace installer container image Defaults to docker.io/dynatrace/oneagent:latest for Kubernetes and to registry.connect.redhat.com/dynatrace/oneagent for OpenShift",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tokens": {
						SchemaProps: spec.SchemaProps{
							Description: "Credentials for the OneAgent to connect back to Dynatrace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Arguments to the OneAgent installer",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Optional: List of environment variables to set for the installer",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: define resources requests and limits for single pods",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: If specified, indicates the pod's priority. Name must be defined by creating a PriorityClass object with that name. If not specified the setting will be removed from the DaemonSet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disableAgentUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable automatic restarts of OneAgent pods in case a new version is available",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableIstio": {
						SchemaProps: spec.SchemaProps{
							Description: "If enabled, Istio on the cluster will be configured automatically to allow access to the Dynatrace environment",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"dnsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Sets DNS Policy for the OneAgent pods",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: set custom Service Account Name used with OneAgent pods",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Adds additional labels for the OneAgent pods",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"proxy": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Set custom proxy settings either directly or from a secret with the field 'proxy'",
							Ref:         ref("./pkg/apis/dynatrace/v1alpha1.OneAgentProxy"),
						},
					},
					"trustedCAs": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Adds custom RootCAs from a configmap",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"apiUrl"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/dynatrace/v1alpha1.OneAgentProxy", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_pkg_apis_dynatrace_v1alpha1_OneAgentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OneAgentStatus defines the observed state of OneAgent",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Dynatrace version being used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instances": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/dynatrace/v1alpha1.OneAgentInstance"),
									},
								},
							},
						},
					},
					"updatedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "The timestamp when the instance was last updated",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the current state (Running, Updating, Error, ...)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/dynatrace/v1alpha1.OneAgentCondition"),
									},
								},
							},
						},
					},
					"lastAPITokenProbeTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "LastAPITokenProbeTimestamp tracks when the last request for the API token validity was sent.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastPaaSTokenProbeTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "LastPaaSTokenProbeTimestamp tracks when the last request for the PaaS token validity was sent.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/dynatrace/v1alpha1.OneAgentCondition", "./pkg/apis/dynatrace/v1alpha1.OneAgentInstance", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
