# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2


defaults: &defaults
  docker:
    - image: circleci/golang:1.13
  working_directory: /go/src/github.com/Dynatrace/dynatrace-oneagent-operator


jobs:
  build:
    <<: *defaults
    environment:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    parallelism: 4
    steps:
      - checkout

      # Download and cache Kubebuilder.
      - run:
          name: Prepare directories for Kubebuilder
          command: |
            sudo mkdir -p /usr/local/kubebuilder
            sudo chmod 777 /usr/local/kubebuilder
      - restore_cache:
          key: kubebuilder-1.0.8
          paths:
              - /usr/local/kubebuilder/bin
      - run:
          name: Fetch Kubebuilder
          command: |
            if [ ! -d "/usr/local/kubebuilder/bin" ]; then
              curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v1.0.8/kubebuilder_1.0.8_linux_amd64.tar.gz -o kubebuilder.tar.gz
              tar -zxvf kubebuilder.tar.gz --strip-components=1 -C /usr/local/kubebuilder
            fi
      - save_cache:
          key: kubebuilder-1.0.8
          paths:
              - /usr/local/kubebuilder/bin

      # Download an cache dependencies.
      - restore_cache:
          keys:
            - gomod-cache-{{ checksum "go.sum" }}
      - run:
          name: Fetch dependencies
          command: go mod download
      - save_cache:
          key: gomod-cache-{{ checksum "go.sum" }}
          paths:
            - /go/pkg

      # Run tests and build the binaries.
      - run:
          name: Run tests
          command: go test -cover -v ./...
      - run:
          name: Run integration tests
          command: go test -cover -tags integration -v ./...
      - run:
          name: Build binary
          command: |
            if [[ -z "$CIRCLE_TAG" ]]; then
               version="snapshot-$(echo $CIRCLE_BRANCH | sed 's#[^a-zA-Z0-9_-]#-#g')"
            else
               version="${CIRCLE_TAG}"
            fi
            go build -ldflags="-X 'github.com/Dynatrace/dynatrace-oneagent-operator/version.Version=${version}'" -o ./build/_output/bin/dynatrace-oneagent-operator ./cmd/manager
      - persist_to_workspace:
          root: .
          paths:
            - LICENSE
            - build

  deploy-snapshot:
    <<: *defaults
    steps:
      - setup_remote_docker
      - run: |
          mkdir -p ~/.docker && chmod 0700 ~/.docker
          touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
          base64 -d >~/.docker/config.json <<<"$OAO_DOCKER_AUTH"
      - attach_workspace:
          at: .
      - run: |
          if [[ "$CIRCLE_BRANCH" == "master" ]]; then
            tag="snapshot"
            label="quay.expires-after=104w"
          else
            tag="snapshot-$(echo $CIRCLE_BRANCH | sed 's#[^a-zA-Z0-9_-]#-#g')"
            label="quay.expires-after=2d"
          fi

          docker build . -f ./build/Dockerfile -t "$OAO_IMAGE:${tag}" --label "${label}"
          docker push "$OAO_IMAGE:${tag}"

  deploy-release:
    <<: *defaults
    steps:
      - setup_remote_docker
      - run: |
          mkdir -p ~/.docker && chmod 0700 ~/.docker
          touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
          base64 -d >~/.docker/config.json <<<"$OAO_DOCKER_AUTH"
      - attach_workspace:
          at: .
      - run: docker build . -f ./build/Dockerfile -t $OAO_IMAGE:$CIRCLE_TAG
      - run: docker push $OAO_IMAGE:$CIRCLE_TAG

  deploy-release-rhcc:
    <<: *defaults
    steps:
      - setup_remote_docker
      - run: |
          mkdir -p ~/.docker && chmod 0700 ~/.docker
          touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
          base64 -d >~/.docker/config.json <<<"$OAO_DOCKER_AUTH_RHCC"
      - attach_workspace:
          at: .
      - run: docker build . -f ./build/Dockerfile-rhel -t $OAO_IMAGE_RHCC:$CIRCLE_TAG
      - run: docker push $OAO_IMAGE_RHCC:$CIRCLE_TAG

  verify-olm:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: sudo pip install operator-courier==2.1.7
      - run: operator-courier verify ./deploy/olm/kubernetes
      - run: operator-courier verify ./deploy/olm/openshift


workflows:
  version: 2
  build-release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy-snapshot:
          requires:
            - build
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /.*/
      - deploy-release:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-release-rhcc:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - verify-olm:
          requires:
            - build
